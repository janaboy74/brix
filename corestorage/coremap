#ifndef COREMAP_INCLUDED
#define COREMAP_INCLUDED

#include <set>
#include <map>
#include <memory>

namespace core {

//--------------------------------
template <class I, class V, class Compare = std::less<I>, class Alloc = std::allocator<std::pair<const I, V>>> struct coremap : public std::map<I, V> {
//--------------------------------
    coremap() : std::map<I, V> () {}
    coremap( std::initializer_list<V> list, const Compare& cmp = Compare(), const Alloc& alloc = Alloc() ) : std::set<V>( list, cmp, alloc ) {}
    V &operator[]( const I item ) {
        static V dummy;
        if( contains( item ))
            return std::map<I, V>::operator[]( item );
        return dummy;
    }
    void insert( const I item, const V val ) {
        std::map<I, V>::insert( std::pair<I, V>( item, val ));
    }
    bool contains( const I item ) const {
        return this->find( item ) != this->end();
    }
};

//--------------------------------
template <class I, class V> class coremapmodificator {
//--------------------------------
    std::set<I> removed;
    std::map<I, V> inserted;
    template<class X, class Y> friend class coremodmap;
public:
    void insert( const std::pair< I, V > item ) {
        insert( item.first, item.second );
    }
    void insert( const I item, const V val ) {
        if( removed.find( item ) != removed.end() )
            removed.erase( item );
        inserted.insert( std::pair<I, V>( item, val ));
    }
    void remove( const I item ) {
        if( inserted.find( item ) != inserted.end() )
            inserted.erase( item );
        removed.insert( item );
    }
    void cleanup() {
        removed.clear();
        inserted.clear();
    }
};

//--------------------------------
template <class I, class V> class coremodmap : public coremap<I, V> {
//--------------------------------
    std::shared_ptr<coremapmodificator<I, V>> mapmodificator;
public:
    coremapmodificator<I, V> &modificator() {
        if( !mapmodificator.get() )
            mapmodificator = std::make_shared<coremapmodificator<I, V>>();
        return *mapmodificator.get();
    }
    void update( coremapmodificator<I, V> *modificator = nullptr ) {
        auto &executor = modificator ? ( *modificator) : ( *mapmodificator.get() );
        if( !&executor )
            return;
        for( auto &item : executor.removed ) {
            std::map<I,V>::erase( item );
        }
        for( auto &item : executor.inserted ) {
            std::map<I,V>::insert( std::pair<I, V>( item.first, item.second ));
        }
        if( !modificator )
            mapmodificator->cleanup();
    }
};

} // namespace core

#endif // COREMAP_INCLUDED
