#ifndef COREVECTOR_INCLUDED
#define COREVECTOR_INCLUDED

#include <vector>

namespace core {

//--------------------------------
template <class V, class Alloc = std::allocator<V>> struct corevector : public std::vector<V> {
//--------------------------------
    corevector() : std::vector<V>() {}
    corevector( std::initializer_list<V> list, const Alloc& alloc = Alloc() ) : std::vector<V>( list, alloc ) {}
    corevector( const size_t s, const V v ) {
        std::vector<V>::resize( s );
        for( auto &var : *this )
            var = v;
    }
    V &operator[]( const size_t index ) {
        static V dummy;
        if( index < this->size() )
            return std::vector<V>::operator[]( index );
        return dummy;
    }
};

} // namespace core

#endif // COREVECTOR_INCLUDED
