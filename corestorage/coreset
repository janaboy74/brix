#ifndef CORESET_INCLUDED
#define CORESET_INCLUDED

#include <set>
#include <memory>

namespace core {

//--------------------------------
template <class V, typename Compare = std::less<V>, typename Alloc = std::allocator<V>> struct coreset : public std::set<V> {
//--------------------------------
    coreset() : std::set<V> () {}
    coreset( std::initializer_list<V> list, const Compare& cmp = Compare(), const Alloc& alloc = Alloc() ) : std::set<V>( list, cmp, alloc ) {}
    V &operator[]( const V val ) {
        static V dummy;
        if( contains( val ))
            return std::set< V>::operator[]( val );
        return dummy;
    }
    bool contains( const V &val ) const {
        return std::set<V>::find( val ) != this->end();
    }
};

//--------------------------------
template <class V> class coresetmodificator {
    //--------------------------------
    std::set<V> removed;
    std::set<V> inserted;
    template<class X, class Compare, class Alloc > friend class coremodset;
public:
    void insert( const V val ) {
        if( removed.find( val ) != inserted.end() )
            removed.erase( val );
        inserted.insert( val );
    }
    void remove( const V val ) {
        if( inserted.find( val ) != inserted.end() )
            inserted.erase( val );
        removed.insert( val );
    }
    void cleanup() {
        removed.clear();
        inserted.clear();
    }
};

//--------------------------------
template <class V, typename Compare = std::less<V>, typename Alloc = std::allocator<V>> struct coremodset : public coreset<V> {
//--------------------------------
    std::shared_ptr<coresetmodificator<V>> setmodificator;
public:
    coremodset() : coreset<V> () {}
    coremodset( std::initializer_list<V> list, const Compare& cmp = Compare(), const Alloc& alloc = Alloc() ) : coreset<V>( list, cmp, alloc ) {}
    coresetmodificator<V> &modificator() {
        if( !setmodificator.get() )
            setmodificator = std::make_shared<coresetmodificator<V>>();
        return *setmodificator.get();
    }
    void update( coresetmodificator<V> *modificator = nullptr ) {
        auto &executor = modificator ? ( *modificator) : ( *setmodificator.get() );
        if( !&executor )
            return;
        for( auto &item : executor.removed ) {
            std::set<V>::erase( item );
        }
        for( auto &item : executor.inserted ) {
            std::set<V>::insert( item );
        }
        if( !modificator )
            setmodificator->cleanup();
    }
};

} // namespace core

#endif // CORESET_INCLUDED
